import csv
import re
import warnings

import pandas as pd
from pandas import DataFrame

warnings.filterwarnings("ignore")


def replace_newlines(input_file_path) -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª–µ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è \n[^0-9] –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    """
    with open(input_file_path, "r", encoding="utf-8") as file:
        content = file.read()
    modified_content = ""
    while modified_content != content:
        modified_content = content
        content = re.sub(r"\n[^0-9]", "", content)
    with open(input_file_path, "w", encoding="utf-8") as file:
        file.write(modified_content)
    return modified_content


def clean_duplicates(df) -> DataFrame:
    df_cleaned = df.copy()
    duplicates_mask = (
        df_cleaned.duplicated(subset=["inn", "company_id", "share"], keep="first")
        & df_cleaned["share_percent"].isna()
    )
    """
        –û—á–∏—â–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        –î—É–±–ª–∏–∫–∞—Ç–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –µ—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ inn, company_id, share –∏ share_percent –ø—É—Å—Ç–æ–π.
        –ï—Å–ª–∏ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ inn, company_id, share, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å —É –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ shared_percent, —Ç–æ –¥—Ä—É–≥–∏–µ —É–¥–∞–ª–∏—Ç—å
        –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏-—É—á—Ä–µ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–π, —Ç–æ —É–¥–∞–ª—è–µ–º, –ø–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç company_id –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–µ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π
    """
    df_cleaned = df_cleaned[~duplicates_mask]

    df_cleaned = (
        df_cleaned.groupby(["inn", "company_id", "share"])
        .apply(
            lambda x: (
                x[x["share_percent"].notna()]
                if (len(x) > 1 and x["share_percent"].notna().any())
                else x
            )
        )
        .reset_index(drop=True)
    )
    return df_cleaned


def get_percent_na_share_percent() -> float:
    return founders["share_percent"].isna().sum() / len(founders)


def fill_missing_share_percent_by_share(df) -> DataFrame:
    """
    –ï—Å–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ company_id –µ—Å—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è share, —Ç–æ share_percent —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ª—è share –∫ –æ–±—â–µ–π –¥–æ–ª–µ.
    """

    def action(group) -> DataFrame:
        mask = group.index
        if group["share_percent"].isna().any():
            share_sum = group["share"].sum()
            df.loc[mask, "share_percent"] = group["share"] / share_sum

    return df.groupby("company_id", group_keys=False).apply(action)


def fill_missing_share_percent_to_single_founders(df) -> DataFrame:
    """
    –ï—Å–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ company_id –≤ share_percent –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –æ–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ 1 –∫ —Å—É–º–º–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–Ω–∞—á–µ–Ω–∏–π.
    """

    def action(group) -> DataFrame:
        if len(group) == 1:
            group["share_percent"] = 1.0
            return group

    return df.groupby("company_id", group_keys=False).apply(action)


def fill_missing_share_percent_by_other_share_percent(df) -> DataFrame:
    """
    –ï—Å–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ company_id share_percent –∏ share –æ—Ç—Å—É—Ç–≤—É—é—Ç –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á—Ä–µ–¥–∏—Ç–µ–ª—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ share_percent —Ä–∞–≤–Ω–æ 1.0
    """

    def action(group) -> DataFrame:
        missing_count = group["share_percent"].isna().sum()
        if missing_count == 1:
            existing_sum = group["share_percent"].sum()
            missing_idx = group[group["share_percent"].isna()].index[0]
            df.loc[missing_idx, "share_percent"] = 1.0 - existing_sum

    return df.groupby("company_id", group_keys=False).apply(action)


def fill_missing_share_percent_by_ratio(df) -> DataFrame:
    """
    –ï—Å–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ company_id –µ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª—å —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –ø–∞—Ä–∞ share –∏ share_percent, —Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ share_percent –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π
    """

    def action(group) -> DataFrame:
        reference = group[
            (group["share"].notna())
            & (group["share_percent"].notna())
            & (group["share"] > 0)
            & (group["share_percent"] > 0)
        ]
        if not reference.empty:
            ref_row = reference.iloc[0]
            ratio = ref_row["share_percent"] / ref_row["share"]
            missing_mask = group["share_percent"].isna() & group["share"].notna()
            group.loc[missing_mask, "share_percent"] = (
                group.loc[missing_mask, "share"] * ratio
            )
            return group

    return df.groupby("company_id", group_keys=False).apply(action)


def calculate_ownership(founders_df, df_company) -> DataFrame:
    """
    –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö –¥–æ–ª–µ–π
    """
    result = []

    def get_ownership_chain(company_id, current_share=1.0, visited=None):
        if visited is None:
            visited = set()

        if company_id in visited:
            return

        visited.add(company_id)

        company_founders = founders_df[founders_df["company_id"] == company_id]

        for _, founder in company_founders.iterrows():
            new_share = current_share * founder["share_percent"]

            if founder["is_person"] == 1:
                result.append(
                    {
                        "company_id": company_id,
                        "inn": founder["inn"],
                        "share_percent": new_share,
                    }
                )
            else:
                # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü - –∫–æ–º–ø–∞–Ω–∏—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                founder_company = df_company[df_company["inn"] == founder["inn"]]
                if not founder_company.empty:
                    get_ownership_chain(
                        founder_company.iloc[0]["id"], new_share, visited.copy()
                    )

    for company_id in df_company["id"].unique():
        get_ownership_chain(company_id)

    return pd.DataFrame(result)


def create_tsv_output(df_company, n_founder, ownership, output_file="results.tsv"):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSV
    """
    valid_companies = ownership[ownership["share_percent"] >= 0.25][
        "company_id"
    ].unique()
    valid_companies.sort()
    with open(output_file, "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f, delimiter="\t")
        for company_id in valid_companies:
            company = df_company[df_company["id"] == company_id]
            if len(company) == 0:
                continue
            else:
                company = company.iloc[0]
            company_founders = ownership[
                (ownership["company_id"] == company_id)
                & (ownership["share_percent"] >= 0.25)
            ]
            if len(company_founders) > 0:
                writer.writerow(
                    [company_id, company["ogrn"], company["inn"], company["full_name"]]
                )
                for _, founder in company_founders.iterrows():
                    person = n_founder[n_founder["inn"] == founder["inn"]]
                    if len(person) == 0:
                        continue
                    else:
                        person = person.iloc[0]
                    full_name = f"{person['last_name']} {person['first_name']} {person['second_name']}"
                    writer.writerow(
                        [
                            "",
                            f"{str(int(founder['inn'])):012}",
                            full_name,
                            f"{founder['share_percent'] * 100:.2f}",
                        ]
                    )


if __name__ == "__main__":
    rows = replace_newlines("company.tsv")
    print("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ company.tsv –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    rows = replace_newlines("founder_legal.tsv")
    print("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ founder_legal.tsv –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    rows = replace_newlines("founder_natural.tsv")
    print("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ founder_natural.tsv –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    df_company = pd.read_csv("company.tsv", sep="\t")
    l_founder = pd.read_csv("founder_legal.tsv", sep="\t")
    n_founder = pd.read_csv("founder_natural.tsv", sep="\t")
    founders = pd.concat(
        [
            l_founder[["inn", "company_id", "share", "share_percent"]].assign(
                is_person=0
            ),
            n_founder[["inn", "company_id", "share", "share_percent"]].assign(
                is_person=1
            ),
        ]
    )
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏ –§–õ:  {len(founders)}")
    founders = clean_duplicates(founders)
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –§–õ:  {len(founders)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏ –Æ–õ:  {len(founders)}")
    founders = founders[
        (founders["is_person"] == 1)
        | (
            (founders["is_person"] == 0)
            & (founders["inn"].isin(df_company["inn"].unique()))
        )
    ]
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Æ–õ:  {len(founders)}")
    print("üü¢ –ò–∑–≤–µ—Å—Ç–Ω—ã –≤—Å–µ –¥–æ–ª–∏ –≤ —Ä—É–±–ª—è—Ö —É –≤—Å–µ—Ö —É—Ä—á–µ–¥–∏—Ç–µ–ª–µ–π")
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent: {get_percent_na_share_percent()*100:.2f}%"
    )
    fill_missing_share_percent_by_share(founders)
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏): {get_percent_na_share_percent()*100:.2f}%"
    )

    print("üü¢ –ï–¥–∏–Ω–Ω—ã–π —É—á—Ä–µ–¥–∏—Ç–µ–ª—å")
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent: {get_percent_na_share_percent()*100:.2f}%"
    )
    fill_missing_share_percent_to_single_founders(founders)
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏): {get_percent_na_share_percent()*100:.2f}%"
    )

    print("üü¢ –ò–∑–≤–µ—Å—Ç–Ω—ã –≤—Å–µ –¥–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π")
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent: {get_percent_na_share_percent()*100:.2f}%"
    )
    fill_missing_share_percent_by_other_share_percent(founders)
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏): {get_percent_na_share_percent()*100:.2f}%"
    )

    print("üü¢ –ò–∑–≤–µ—Å—Ç–Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent: {get_percent_na_share_percent()*100:.2f}%"
    )
    fill_missing_share_percent_by_ratio(founders)
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö share_percent (–ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏): {get_percent_na_share_percent()*100:.2f}%"
    )
    print("üü¢ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –∫–æ—Å–≤–µ–Ω–Ω—ã—Ö –¥–æ–ª–µ–π")
    ownership = calculate_ownership(founders, df_company)
    print("üü¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    create_tsv_output(df_company, n_founder, founders)
